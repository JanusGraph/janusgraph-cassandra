<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <groupId>org.janusgraph</groupId>
    <artifactId>janusgraph-cassandra</artifactId>
    <version>0.5.0-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>JanusGraph-Cassandra: Distributed Graph Database</name>
    <url>https://janusgraph.org</url>
    

    <properties>
        <janusgraph.version>0.4.0</janusgraph.version>
        <astyanax.version>3.10.2</astyanax.version>
        <dependency.plugin.version>2.8</dependency.plugin.version>
        <metrics.version>3.2.2</metrics.version>
        <jna.version>4.0.0</jna.version>
        <cassandra.version>2.2.13</cassandra.version>
        
        <compiler.source>1.8</compiler.source>
        <compiler.target>1.8</compiler.target>

        <jamm.version>0.3.0</jamm.version>
        <jamm.group>com.github.jbellis</jamm.group>
        <test.extra.jvm.opts>-javaagent:${basedir}/target/jamm-${jamm.version}.jar</test.extra.jvm.opts>

        <default.test.jvm.opts>-Xms256m -Xmx1280m -ea -XX:+HeapDumpOnOutOfMemoryError ${test.extra.jvm.opts}</default.test.jvm.opts>
        <mem.jvm.opts>-Xms256m -Xmx768m -ea -XX:+HeapDumpOnOutOfMemoryError ${test.extra.jvm.opts}</mem.jvm.opts>
    </properties>
    <!-- Libraries -->
    
    <dependencies>
        <dependency>
            <groupId>org.janusgraph</groupId>
            <artifactId>janusgraph-core</artifactId>
            <version>${janusgraph.version}</version>
        </dependency>
        <dependency>
            <groupId>org.janusgraph</groupId>
            <artifactId>janusgraph-test</artifactId>
            <version>${janusgraph.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-jvm</artifactId>
            <version>${metrics.version}</version>
        </dependency>
        <dependency>
            <groupId>com.carrotsearch</groupId>
            <artifactId>junit-benchmarks</artifactId>
            <version>0.7.0</version>
            <scope>test</scope>
        </dependency>
        <!-- Logging backends.
             Cassandra 2.1+ moved to Logback.  JanusGraph is logging-backend-agnostic,
             but still uses Log4j in testing.  The slf4j binding for logback is,
             inconveniently, packed into the logback-classic artifact.  This means
             the binding can't easily be removed from the classpath without losing
             logback-classic or inserting some hack to mess with the jar contents.
             We can't lose logback-classic because StorageProxy contains hardcoded
             references to some of its classes (it contains some methods to change
             logback loglevels at runtime).  Hence, to stick with Log4j, the
             least-worst approach is to enforce a classpath ordering constraint: as
             long as the slf4j-log4j12 binding appears on the classpath before
             logback-classic, log4j will be used instead of logback.  I don't have
             any special love for log4j, but JanusGraph should use a single logging
             backend throughout all its tests.   I don't want to maintain a mixture
             of logback.xml and log4j.properties files scattered randomly through
             the janusgraph-* submodules.  Maven populates the classpath elements for
             tests in pom appearance order.  That's why these dependencies are 
             explicitly declared below: to make slf4j-log4j12 preced logback-classic
             on the test classpath. -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.7.12</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.1.3</version>
        </dependency>
        <!-- End logging backends. -->
        <dependency>
            <groupId>com.carrotsearch.randomizedtesting</groupId>
            <artifactId>randomizedtesting-runner</artifactId>
            <version>2.7.2</version>
            <scope>test</scope>
        </dependency>
        <!--
            JNA is not required to run Cassandra, but it improves
            efficiency of certain of Cassandra's filesystem and memory
            operations.  DataStax describes JNA as "required for
            production installations":

            https://www.datastax.com/docs/1.2/install/install_jre
        -->
        <dependency>
            <groupId>net.java.dev.jna</groupId>
            <artifactId>jna</artifactId>
            <version>${jna.version}</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.apache.cassandra</groupId>
            <artifactId>cassandra-all</artifactId>
            <version>${cassandra.version}</version>
            <!-- The version is controlled in <dependencyManagement> in the parent pom -->
            <exclusions>
                <!-- Use more recent version of jbcrypt from gremlin-groovy -->
                <exclusion>
                    <groupId>org.mindrot</groupId>
                    <artifactId>jbcrypt</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>net.java.dev.jna</groupId>
                    <artifactId>jna</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>jcl-over-slf4j</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>io.dropwizard.metrics</groupId>
                    <artifactId>metrics-core</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>io.dropwizard.metrics</groupId>
                    <artifactId>metrics-jvm</artifactId>
                </exclusion>
                <!-- We already use slf4j-log4j12, having both on the class path leads to cyclic dependency:  https://www.slf4j.org/codes.html#log4jDelegationLoop -->
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>log4j-over-slf4j</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>commons-pool</groupId>
            <artifactId>commons-pool</artifactId>
            <version>1.6</version>
        </dependency>
        <dependency>
            <groupId>com.netflix.astyanax</groupId>
            <artifactId>astyanax-core</artifactId>
            <version>${astyanax.version}</version>
        </dependency>
        <dependency>
            <groupId>com.netflix.astyanax</groupId>
            <artifactId>astyanax-thrift</artifactId>
            <version>${astyanax.version}</version>
        </dependency>
        <dependency>
            <groupId>com.netflix.astyanax</groupId>
            <artifactId>astyanax-cassandra</artifactId>
            <version>${astyanax.version}</version>
        </dependency>
        <dependency>
             <groupId>com.netflix.astyanax</groupId>
             <artifactId>astyanax-recipes</artifactId>
             <version>${astyanax.version}</version>
        </dependency>
        <dependency>
            <groupId>org.xerial.snappy</groupId>
            <artifactId>snappy-java</artifactId>
            <version>1.0.5-M3</version>
        </dependency>
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>1.1.0.Final</version>
        </dependency>
        <dependency>
            <groupId>net.jpountz.lz4</groupId>
            <artifactId>lz4</artifactId>
            <version>1.3.0</version>
        </dependency>
    </dependencies>

    <build>
    
        <resources>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>${basedir}/src/test/resources</directory>
            </testResource>
        </testResources>
        
        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>${compiler.source}</source>
                    <target>${compiler.target}</target>
                    <compilerArguments>
                        <Xmaxerrs>500</Xmaxerrs>
                    </compilerArguments>
                    <compilerArgs>
                      <arg>-Xlint:unchecked</arg>
                    </compilerArgs>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>filter-cassandra-bop-config</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/cassandra/conf/localhost-bop</outputDirectory>
                            <filters>
                                <filter>${basedir}/config/cassandra-filters/localhost-bop.properties</filter>
                            </filters>
                            <resources>
                                <resource>
                                    <directory>${basedir}/config/cassandra</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>filter-cassandra-murmur-config</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/cassandra/conf/localhost-murmur</outputDirectory>
                            <filters>
                                <filter>${basedir}/config/cassandra-filters/localhost-murmur.properties</filter>
                            </filters>
                            <resources>
                                <resource>
                                    <directory>${basedir}/config/cassandra</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>filter-cassandra-murmur-ssl-config</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/cassandra/conf/localhost-murmur-ssl</outputDirectory>
                            <filters>
                                <filter>${basedir}/config/cassandra-filters/localhost-murmur-ssl.properties</filter>
                            </filters>
                            <resources>
                                <resource>
                                    <directory>${basedir}/config/cassandra</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <!-- Need this to avoid corrupting the test keystore with nonsensical macro replacements -->
                        <id>filter-cassandra-murmur-ssl-config-static</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/cassandra/conf/localhost-murmur-ssl</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${basedir}/config/static</directory>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.1</version>
                <configuration>
                    <argLine>${default.test.jvm.opts}</argLine>
                    <runOrder>alphabetical</runOrder>
                    <failIfNoTests>false</failIfNoTests>
                    <!-- six hours -->
                    <forkedProcessTimeoutInSeconds>21600</forkedProcessTimeoutInSeconds>
                    <reuseForks>false</reuseForks>
                    <excludes>
                        <exclude>**/*PerformanceTest.java</exclude>
                        <exclude>**/*ConcurrentTest.java</exclude>
                        <exclude>**/*Groovy*Test.java</exclude>
                        <exclude>**/*ComputerTest.java</exclude>
                        <exclude>**/*ProcessTest.java</exclude>
                        <exclude>**/*ProcessPerformanceTest.java</exclude>
                        <exclude>**/*StructureTest.java</exclude>
                    </excludes>
                    <excludedGroups>${test.excluded.groups}</excludedGroups>
                    <skip>${test.skip.default}</skip>
                    <!-- Use log4j.properties from module test resources -->
                    <systemProperties>
                        <property>
                            <name>log4j.configuration</name>
                            <value>file:${project.build.directory}/test-classes/log4j.properties</value>
                        </property>
                    </systemProperties>
                </configuration>
                <executions>
                    <execution>
                        <!-- Run by "mvn test" -->
                        <id>default-test</id>
                        <phase>none</phase>
                    </execution>
                    <execution>
                        <id>tinkerpop-test</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <phase>test</phase>
                        <configuration combine.self="override">
                            <reuseForks>false</reuseForks>
                            <forkCount>1</forkCount>
                            <parallel>none</parallel>
                            <threadCount>1</threadCount>
                            <perCoreThreadCount>false</perCoreThreadCount>
                            <includes>
                                <include>**/*Groovy*Test.java</include>
                                <include>**/*ComputerTest.java</include>
                                <include>**/*ProcessTest.java</include>
                                <include>**/*ProcessPerformanceTest.java</include>
                                <include>**/*StructureTest.java</include>
                            </includes>
                            <runOrder>alphabetical</runOrder>
                            <skipTests>${test.skip.tp}</skipTests>
                            <systemPropertyVariables>
                              <build.dir>${project.build.directory}</build.dir>
                              <log4j.configuration>file:${project.build.directory}/test-classes/log4j.properties</log4j.configuration>
                              <is.testing>true</is.testing>
                            </systemPropertyVariables>
                        </configuration>
                    </execution>
                    <execution>
                        <!-- Run by "mvn org.apache.maven.plugins:maven-surefire-plugin:test"
                
                            Sonar does this when running JaCoCo and
                            provides no configuration option to
                            change its behavior. Define a safe
                            configuration for JaCoCo to use when run
                            by Sonar. This doesn't have to be fast,
                            since it's only used for dynamic
                            analysis, but it does have to cover all
                            the tests.
                        -->
                        <id>default-cli</id>
                        <phase>none</phase>
                        <configuration>
                            <includes>
                                <include>Nope.java</include>
                            </includes>
                            <exclude>
                                <exclude>**/*</exclude>
                            </exclude>
                            <parallel />
                            <reuseForks>false</reuseForks>
                            <threadCount>1</threadCount>
                            <perCoreThreadCount>false</perCoreThreadCount>
                            <runOrder>random</runOrder>
                        </configuration>
                    </execution>
                    <execution>
                        <id>bop-test</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <phase>test</phase>
                        <configuration>
                            <argLine>${default.test.jvm.opts} -Dtest.cassandra.confdir=${project.build.directory}/cassandra/conf/localhost-bop -Dtest.cassandra.datadir=${project.build.directory}/cassandra/data/localhost-bop</argLine>
                            <excludedGroups>${test.excluded.groups},UNORDERED_KEY_STORE_TESTS,SERIAL_TESTS,CASSANDRA_SSL_TESTS</excludedGroups>
                            <groups />
                            <forkCount>1</forkCount>
                            <reuseForks>false</reuseForks>
                            <parallel>classes</parallel>
                            <perCoreThreadCount>true</perCoreThreadCount>
                            <threadCount>2</threadCount>
                            <runOrder>random</runOrder>
                            <reportNameSuffix>bop</reportNameSuffix>
                            <skip>${test.skip.ordered}</skip>
                        </configuration>
                    </execution>
                    <execution>
                        <id>murmur-test</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <phase>test</phase>
                        <configuration>
                            <argLine>${default.test.jvm.opts} -Dtest.cassandra.confdir=${project.build.directory}/cassandra/conf/localhost-murmur -Dtest.cassandra.datadir=${project.build.directory}/cassandra/data/localhost-murmur</argLine>
                            <excludedGroups>${test.excluded.groups},UNORDERED_KEY_STORE_TESTS,SERIAL_TESTS,CASSANDRA_SSL_TESTS</excludedGroups>
                            <groups />
                            <forkCount>1</forkCount>
                            <reuseForks>false</reuseForks>
                            <parallel>classes</parallel>
                            <perCoreThreadCount>true</perCoreThreadCount>
                            <threadCount>2</threadCount>
                            <runOrder>random</runOrder>
                            <reportNameSuffix>murmur</reportNameSuffix>
                            <skip>${test.skip.unordered}</skip>
                        </configuration>
                    </execution>
                    <execution>
                        <id>ssl-test</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <phase>test</phase>
                        <configuration>
                            <argLine>${default.test.jvm.opts} -Dtest.cassandra.confdir=${project.build.directory}/cassandra/conf/localhost-murmur-ssl -Dtest.cassandra.datadir=${project.build.directory}/cassandra/data/localhost-murmur-ssl</argLine>
                            <excludedGroups />
                            <groups>CASSANDRA_SSL_TESTS</groups>
                            <!-- The TP3 JUnit Suite/Runner ignores groups/@Category and I'm not sure why.  Redundant excludes to keep TP3 tests from using non-SSL configs on SSL -->
                            <excludes>
                                <exclude>**/*ComputerTest.java</exclude>
                                <exclude>**/*StructureTest.java</exclude>
                                <exclude>**/*ProcessTest.java</exclude>
                            </excludes>
                            <forkCount>1</forkCount>
                            <reuseForks>false</reuseForks>
                            <parallel>classes</parallel>
                            <perCoreThreadCount>true</perCoreThreadCount>
                            <threadCount>1</threadCount>
                            <runOrder>random</runOrder>
                            <reportNameSuffix>ssl</reportNameSuffix>
                            <skip>${test.skip.ssl}</skip>
                        </configuration>
                    </execution>
                    <execution>
                        <id>serial-test</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <phase>test</phase>
                        <configuration>
                            <argLine>${default.test.jvm.opts} -Dtest.cassandra.confdir=${project.build.directory}/cassandra/conf/localhost-murmur -Dtest.cassandra.datadir=${project.build.directory}/cassandra/data/localhost-murmur</argLine>
                            <excludedGroups />
                            <groups>SERIAL_TESTS</groups>
                            <forkCount>1</forkCount>
                            <reuseForks>false</reuseForks>
                            <parallel>none</parallel>
                            <perCoreThreadCount>false</perCoreThreadCount>
                            <threadCount>1</threadCount>
                            <runOrder>alphabetical</runOrder>
                            <reportNameSuffix>serial</reportNameSuffix>
                            <skip>${test.skip.serial}</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <!-- Provide Java Memory Meter for Cassandra. Cassandra logs warnings if JAMM 
                      is not available. Also, production Cassandra deployments will probably use JAMM, 
                      so we might as well include it in our test configuration. -->
                    <execution>
                        <id>copy</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>${jamm.group}</groupId>
                                    <artifactId>jamm</artifactId>
                                    <version>${jamm.version}</version>
                                    <outputDirectory>${project.build.directory}</outputDirectory>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <id>pack-test-jar</id>
                        <!-- prepare-package instead of package forces it to get signed -->
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>test-jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
	          <id>coverage</id>
	          <activation>
	              <activeByDefault>false</activeByDefault>
	          </activation>
	          <properties>
	              <test.extra.jvm.opts>${jacoco.opts} -javaagent:${basedir}/target/jamm-${jamm.version}.jar</test.extra.jvm.opts>
	          </properties>
        </profile>
        <profile>
            <!-- Run Thrift tests with ScyllaDB (requires Docker) -->
            <id>scylladb-test</id>
            <properties>
                <!-- Tests are run under failsafe so skip them under surefire -->
                <test.skip.ordered>true</test.skip.ordered>
                <test.skip.unordered>true</test.skip.unordered>
                <test.skip.ssl>true</test.skip.ssl>
                <test.skip.serial>true</test.skip.serial>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <configuration>
                            <skipITs>false</skipITs>
                            <includes>
                                <include>**/org/janusgraph/diskstorage/cassandra/thrift/*.java</include>
                                <include>**/org/janusgraph/graphdb/thrift/*.java</include>
                            </includes>
                            <!-- Exclude default (performance/memory) tests. Also exclude SSL tests (fail under Scylla) -->
                            <excludedGroups>${test.excluded.groups},CASSANDRA_SSL_TESTS</excludedGroups>
                            <systemProperties>
                                <!-- Run tests against the containerized Scylla test server -->
                                <property>
                                    <name>storage.hostname</name>
                                    <value>0.0.0.0</value>
                                </property>
                            </systemProperties>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>0.18.1</version>
                        <configuration>
                            <images>
                                <image>
                                    <alias>scylladb</alias>
                                    <name>scylladb/scylla:${scylladb.version}</name>
                                    <run>
                                        <!-- Limit to two CPUs -->
                                        <cmd>--smp 2</cmd>
                                        <!-- Expose Thrift and CQL ports -->
                                        <ports>
                                            <port>9160:9160</port>
                                            <port>9042:9042</port>
                                        </ports>
                                        <wait>
                                            <tcp>
                                                <ports>
                                                    <port>9160</port>
                                                    <port>9042</port>
                                                </ports>
                                            </tcp>
                                            <time>60000</time>
                                        </wait>
                                    </run>
                                </image>
                            </images>
                        </configuration>
                        <executions>
                            <execution>
                                <id>docker-start</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>docker-stop</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>stop</goal>
                                    <goal>remove</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>

